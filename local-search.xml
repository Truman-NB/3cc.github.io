<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>New Year Resolution</title>
    <link href="/2025/01/31/New-Year-Resolution/"/>
    <url>/2025/01/31/New-Year-Resolution/</url>
    
    <content type="html"><![CDATA[<p>过去一年还是经历了很多事情，想想仿佛去年要写年度总结的想法如昨日般，居然又搁置了一年，还是得写写文字，不论文笔，多写点回头看也算一种回味。</p><p><strong>不靠谱</strong><br>不知为何，第一出现在我想法中的，是不靠谱这三个字。这一年的 dramatic issues 确实好多哇，年初上海深圳的票双管齐下，最终落地上海；秋季开学前，又是经历了离家前的疯狂拌嘴愤怒和进组后的扑朔迷离结束。何处安心是吾处？有时不得不感慨，诺大的世界，70 亿人的轨迹，是怎样的交错安排才造就了每个人的遭遇？正式换组后，却又毫无警示预兆地跌入蚕丝的陷阱，不过应该算是我谬赞罢了，忆甜思乐怎未尝不可，所谓当断不断反受其乱也。后来，组里流动大换血，这期间我仿佛变了一个人，仿佛不苟言笑冷漠的 s 人一直是我的幻想，而安慰照顾成了我褪之不去的外壳，我讨厌成为情绪垃圾桶的样子，却又无能为力，惟有淡然处之，学会戴上面具，面对世俗。如何强装、强装至何种地步，厌烦之至。</p><p><strong>着急</strong><br>“年少的他，听了太多这个世界年少有为的故事，却仍不知何去何从”<br>内心焦灼实则是过去一年多的真实写照。大四上，身边几位好友进入实验室，对于课程我虽尝到了第一次用心体会知识的惬意，但本科的氛围陡转骤变，大家都忙起来了，不时焦虑与憧憬未来也难以避免。大四下的毕设，说来也算充实，打下了有机合成实验的基础，除此之外也是单薄无味。不记得在那间教室（记不住教室名，也可见我这个人的假情假意）坐了多久，具体多少天多少小时多少分钟几秒，也忘记了在网上搜了多少次有关清深的一切信息，直至提前入组，都还在窥探一二。如今看来，毫无用处，都是打发时间的借口。可如今的我，又有着新的着急，对课题的不确定性，对两年半研究结果的不确定性，对未来出国与否的不确定性，对之后导师选择的不确定性，以至于对未来生活水平的不确定性，如死结般在我的脑海中，难以打开。再到此刻，我于此写下这些不知所谓，也算不了什么。</p><p><strong>遗憾</strong><br>仔细想来，“丧”之于我，自高中以来便难以分割。我也不时怀念初中的我，意气风发，笃视一切，说干就干。但想来初中的我也有初中的烦恼，只是此刻的我只记住了那最辉煌的一刻，便盖过所有灰色。可是后来呢，只是没有值得非常高兴的事了。如果非要说，情场失意确算得上最大的遗憾了。想来也着实搞笑，每个新阶段，我都能勇敢一把，然后就没有然后。高一的走廊、大一的图书馆、研一的教室。哦，还有大四的最后挣扎。在朋友面前，我喜欢自诩为理论大师，现在面对这些文字真乃汗颜。我从不否认见色起意，所以我也时常考虑阳痿是男人的福报之正确性，但我也向往一次亲吻、一个拥抱、一种相互认可、一场互诉衷肠。可是啊，自我的小本本中，“本人不适合任何亲密关系”，想来也是最终的宣判。<br>另一个遗憾，是对钱财不守的遗憾。今年先扬后抑的一波亏损，直接让入市亏损来到三万有余。如果没有这一亏损，我可以独自偿还助学贷款，也不至于每次父亲给钱就客气几番最终收着，不想成为父亲的模样。千金散尽还复来，也只能苦苦安慰自己了。还有个遗憾呢，便是没能本科海外直博，看着本科后几级的学生自大一便早早进入“强组”，沾染几篇文章，海外求学也不过是他们诸多选择中的一个。若当时的我，能有此等目标与追求，也不至沦落于此。<br>遗憾便到此为止吧，真说起来，倒是无穷无尽，扭扭捏捏之丑态了。</p><p><strong>珍惜</strong><br>家和万事兴，此中之“和”，不仅有家庭和睦，也有身体安康之和气。老妈的身体状况，一直是全家的担心。9 月份的冲突，可能让大家都学会珍惜当下的彼此。明白家人的出发点，换位包容，也让今年过年的我体味不到以往的烦躁与不耐烦，这大概是变老的样子吧。都说年味不抵从前，可是如今的年味，又还能享受几年呢。<br>我仍珍惜在上海读书的日子，大四在街头巷尾肆意骑行的场景，我也珍惜在深圳读书的日子，见识新的知识、面孔和机遇，体会不同纬度气候的滋味。</p><p><strong>写在最后</strong><br>终于步入主题了，没错，新年决心。我记得，第一次看到这三个词，还是在高中英语试卷的阅读上（具体高几、文章讲的什么，恕我难以记得，我也想再回到那个场景看一看）。<br>我的新年决心！<br>少说少胡思乱想多做，学会贪心地、不设限地追求未来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OJ task</title>
    <link href="/2024/11/26/OJ-task/"/>
    <url>/2024/11/26/OJ-task/</url>
    
    <content type="html"><![CDATA[<h1 id="Interesting-Stones"><a href="#Interesting-Stones" class="headerlink" title="Interesting Stones"></a>Interesting Stones</h1><p>A girl named Tomori likes to collect stones. There are so many types of stones in our world, that if we assign each type an integer number, it could be as large as $10^7$.</p><p>One day Tomori lined up her stones in a row. A stray cat came and said, “Your stones are not interesting.” The cat thinks a row of stones is interesting if and only if:</p><p><strong>Every</strong> continuous subsequence of the row contains <strong>at least one</strong> stone of <strong>unique</strong> type, i.e. no other stone <strong>in this subsequence</strong> has that same type. (Only need to be unique within the subsequence.) (The entire row is a subsequence of itself.)</p><p>(A continuous subsequence of an array 𝑎[0…𝑛−1] is a subsequence 𝑎[𝑖],𝑎[𝑖+1],…,𝑎[𝑗] where 0≤𝑖≤𝑗&lt;𝑛.)</p><p>Tomori wants to make friends with the cat. Can you develop a program to help her quickly determine whether her rows of stones are interesting?</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer 𝑇(1≤𝑇≤200), the number of test cases. Then 𝑇 test cases follow.</p><p>The first line of each test case contains an integer 𝑛 (1≤𝑛≤10000), the number of stones in Tomori’s row. The second line contains 𝑛 non-negative integers (values &lt; $10^7$) separated with single spaces, the types of stones in Tomori’s row.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, output a single line of the word “Yes” if the row of stones is interesting, otherwise output “No”. Trailing whitespace or line break will be ignored.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">4<br>5<br>1 2 3 4 5<br>5<br>1 1 1 1 1<br>5<br>1 2 3 2 1<br>5<br>1 1 2 1 1<br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Yes<br>No<br>Yes<br>No<br></code></pre></td></tr></table></figure><h2 id="Example-Explained"><a href="#Example-Explained" class="headerlink" title="Example Explained"></a>Example Explained</h2><p>This row is insteresting. I marked some subsequences (not all of them) in different colors, and the unique item(s) within them are marked red. You can check that for all subsequences, there is at least one unique item within.</p><p><img src="https://oj.cs.tsinghua.edu.cn/staticdata/1899.dWEJWCaOGoTYsoZJ.pub/BVKcle10qLc1L06n.non-boring-example.png/non-boring-example.png"></p><h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul><li>Time limit: <strong>2 s</strong> for C&#x2F;C++; <strong>4 s</strong> for Java&#x2F;Python</li><li>(Stack+Heap) Space limit: 512 MB</li></ul><h2 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h2><ol><li><p>Solve the problem in 𝑂(𝑛log⁡𝑛) time with divide and conquer.</p></li><li><p>You may get “Time Limit Exceeded” for the last 1 ~ 3 tests (depends on how good your code is). To overcome it, <strong>you need pre-processing</strong>. Why? Because we need a <strong>fast enough method to do unique check and unique finding</strong>. Make it as fast as possible. <strong>It’s crucial!</strong> And pre-processing, by its name, is something that happens before the recursion even starts.</p><p> Considering that it’s hard to realize its necessity, more details are provided here. See the following figure. Is <code>3</code> unique within the subsequence between the brackets? Yes, because the <strong>previous and next positions</strong> where another <code>3</code> shows up are both outside the subsequence. This way it only costs 𝑂(1) time to check uniqueness, as long as we build up these “arrows” before the recursion starts. And your scan-and-find-unique procedure can <em>early stop</em> (see the next hint).</p><p> <img src="https://oj.cs.tsinghua.edu.cn/staticdata/1899.dWEJWCaOGoTYsoZJ.pub/MrdpjulBPHfU2uE4.prev_next.png/prev_next.png"></p><p> So you need 2 utility arrays, each of the same length as the row. And to build them up, you may want to temporarily use a hashmap. See <a href="https://en.cppreference.com/w/cpp/container/unordered_map">unordered_map (C++11)</a>, <a href="https://en.cppreference.com/w/cpp/container/map">map (C++)</a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html">HashMap (Java)</a>, <a href="https://docs.python.org/3/library/stdtypes.html#dict">dict (Python)</a>.</p></li><li><p>To handle the <strong>worst case</strong>, <em>it would be better to start from both ends …?</em> That would be the key to getting the last 10 points.</p><p> These two optimizations, i.e. pre-processing and handling the worst case, are both fighting a single common enemy: <strong>unbalanced recursion tree</strong>. You all know from class that partitioning at middle + Θ(𝑛) dividing&#x2F;combining time &#x3D; Θ(𝑛log⁡𝑛) total time. But what if the partitioning could happen everywhere? The recursion tree could be highly unbalanced, and it wouldn’t finish in Θ(𝑛log⁡𝑛) even if each node still cost Θ(𝑛) time. Draw on a paper and check it yourself.</p><p> That’s why the unique-finding procedure should be fast and able to <em>early stop</em> once it finds a unique element (no need to do the full scan every time). And that <em>starting from both ends</em> is a simple yet effective way to <em>short-circuit</em> the worst case where the partitioning always happens at …?</p><p> Hope this problem illustrates the significant impact that the cost of each recursive call can have on the total running time, particularly in the case of an unbalanced recursion tree.</p></li><li><p>Try brute-force as last resort. Good outcomes.</p></li><li><p>If you get wrong answer on the 1st test case, it surely means your algorithm is wrong. Yes, a simple check based on some necessary condition can kill most cases (same points as brute-force), but this problem is not that simple.</p></li></ol><p><strong>No more hints after this final update.</strong></p><h2 id="Quick-facts-about-recursion-in-real-world"><a href="#Quick-facts-about-recursion-in-real-world" class="headerlink" title="Quick facts about recursion in real world"></a>Quick facts about recursion in real world</h2><ol><li><p>As recursion is typically used in D&amp;C problems, you should notice that <strong>there is such thing as stack space limit</strong> in operating systems. Simply put, very deep recursion or very large local variables may cause <a href="https://en.wikipedia.org/wiki/Stack_overflow">stack overflow</a>. Even it’s 2024, the OS on your PC probably still has a small default stack limit of 1MB&#x2F;8MB&#x2F;…</p></li><li><p>But as stated on the <a href="https://oj.cs.tsinghua.edu.cn/">OJ home page</a>, stack space memory on this platform is counted together with heap space memory into total memory usage, not to be limited separately. You should only get stack overflow (would show as RuntimeError in the last 1 or 3 test cases) if you wrote really bad code. Additionally for Python users, please set a special parameter to allow for deep recursion. See <em>Special notes for Python</em>.</p><ul><li>But don’t blame every RuntimeError on that. Your RuntimeErrors would mostly be caused by index out of range. Check the input value constraints carefully.</li></ul></li><li><p>In real world applications outside classroom, deep recursion should be avoided by switching to iterative algorithms. If that’s not possible, you can still get an iterative program by manually simulating the call stack. But that’s another story.</p></li></ol><h2 id="Special-notes-for-Python"><a href="#Special-notes-for-Python" class="headerlink" title="Special notes for Python"></a>Special notes for Python</h2><ul><li><p><strong>IMPORTANT</strong>: The recursion depth of this problem may exceed the default recursion limit of Python. <strong>You should add <code>import sys</code> and <code>sys.setrecursionlimit(10005)</code> to the beginning of your code</strong>.</p></li><li><p>Please avoid unnecessary list expanding operations. Python is too slow to afford that. For example,</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># do this</span><br>util_arr = [<span class="hljs-number">0</span>] * maxn  <span class="hljs-comment"># allocate only once</span><br><span class="hljs-keyword">for</span> test_case <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>  n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>  a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    util_arr[i] = ...<br><br><span class="hljs-comment"># instead of this</span><br><span class="hljs-keyword">for</span> test_case <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>  n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>  a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>  util_arr = []  <span class="hljs-comment"># a new empty list every time!</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-comment"># when internal capacity is reached, expensive list expanding operation happens</span><br>    util_arr.append(...)<br></code></pre></td></tr></table></figure><p>  Python code written in adherence to good programming practices should pass all test cases.</p></li></ul><h1 id="Minimum-edge-sum"><a href="#Minimum-edge-sum" class="headerlink" title="Minimum edge sum"></a>Minimum edge sum</h1><p>You are given two separate rows of vertices. Let’s label the vertices, always from left to right, as $𝐴_1$ … $𝐴_𝑛$ ​ for the first row and $𝐵_1$ … $𝐵_𝑚$ ​ for the second row. Every vertex is assigned with an integer value, $𝑎_𝑖$ for $𝐴_𝑖$ and $𝑏_𝑗$ ​ for $𝐵_𝑗$ ​ (1≤𝑖≤𝑛 and 1≤𝑗≤𝑚, same for the following).</p><p>In this problem you are asked to draw edges to construct a bipartite graph from the given two rows of vertices. By using the term <strong>bipartite graph</strong>, we mean that every edge you draw should connect a vertex $𝐴_𝑖$ in the first row to a vertex $𝐵_𝑗$ in the second row, and we label this edge as 𝐸<sub>𝑖𝑗</sub>, whose weight is defined as 𝑒<sub>𝑖𝑗</sub>&#x3D;∣$𝑎_𝑖$ − $𝑏_𝑗$∣ (the absolute difference between the two vertices’ values).</p><p>While drawing edges, you should follow these <strong>rules</strong>:</p><ol><li>The graph should be bipartite, as stated above;</li><li>There should be an edge connecting $𝐴_1$ ​ and $𝐵_1$ ​, i.e. 𝐸<sub>11</sub>​ exists;</li><li>There should be an edge connecting $𝐴_𝑛$ ​ and $𝐵_𝑚$, i.e. 𝐸<sub>𝑛𝑚</sub>​ exists;</li><li>Every vertex should be connected to at least one other vertex (i.e. no “isolated vertices”);</li><li>There can be at most one edge 𝐸<sub>𝑖𝑗</sub> between any vertex pair (𝐴𝑖,𝐵𝑗) (i.e. no “multiple edges”);</li><li>Edges should not cross each other. The following image shows examples of a valid and an invalid graph, with the bold red edges crossing each other.</li></ol><p><img src="https://oj.cs.tsinghua.edu.cn/staticdata/1900.VsGoG2lLzGVvLqA3.pub/c9yn202F8TdtjxEn.examples.png/examples.png"></p><p>To be more specific, if you draw an edge 𝐸<sub>𝑖𝑗</sub>, then you cannot draw any edge 𝐸<sub>𝑝𝑞</sub> where (𝑝&lt;𝑖 AND 𝑞&gt;𝑗) OR (𝑝&gt;𝑖 AND 𝑞&lt;𝑗), because the two edges will cross each other.</p><p>The <strong>edge sum</strong> of a graph is defined as the sum of all edges’ weights. Your goal is to find a bipartite graph with the <strong>minimum edge sum</strong>, while following the rules above.</p><h2 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains two integers 𝑛 and 𝑚, separated with a single space, the number of vertices in the first and second row, respectively.</p><p>The second line contains 𝑛 integers $𝑎_1$ … $𝑎_𝑛$ ​, separated with single spaces, the values of the vertices in the first row.</p><p>The third line contains 𝑚 integers $𝑏_1$ … $𝑏_𝑚$ ​, separated with single spaces, the values of the vertices in the second row.</p><h2 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h2><p>An integer, the minimum edge sum of a valid bipartite graph. Trailing whitespace or line break will be ignored.</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">4 5<br>1 5 4 6<br>6 2 5 7 7<br></code></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">9<br></code></pre></td></tr></table></figure><h2 id="Sample-Explanation"><a href="#Sample-Explanation" class="headerlink" title="Sample Explanation"></a>Sample Explanation</h2><p><img src="https://oj.cs.tsinghua.edu.cn/staticdata/1900.VsGoG2lLzGVvLqA3.pub/l53y2aqP5H7Q2qiC.sample.png/sample.png"></p><p>5+1+0+1+1+1&#x3D;9</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤𝑛,𝑚≤1000</li><li>Specially for test cases 1~6: 1≤𝑛,𝑚≤10</li><li>All $𝑎_𝑖$, $𝑏_𝑗$ are within the value range of a 16-bit signed integer, i.e. −32768≤$𝑎_𝑖$, $𝑏_𝑗$≤32767</li></ul><h2 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h2><ul><li>Time limit: 1.5 s</li><li>Memory limit: 512 MB</li></ul><h2 id="Hints-1"><a href="#Hints-1" class="headerlink" title="Hints"></a>Hints</h2><ol><li>This is a dynamic programming problem. No requisite knowledge of graph algorithms is needed.</li><li>The first step of solving a DP problem is often to define the state function courageously. But do make a clear definition without ambiguity.</li><li>Think how the rules result in optimal substructure property along with a simple yet elegant DP recurrence (state transition equation).</li><li>Draw on a paper: 1) the bipartite graph and 2) visualization of the DP state transition, to help thinking.</li><li>Test cases 1~6 have small 𝑛 and 𝑚, allowing for a brute-force search&#x2F;enumeration as your last resort.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I need money</title>
    <link href="/2024/03/17/I-need-money/"/>
    <url>/2024/03/17/I-need-money/</url>
    
    <content type="html"><![CDATA[<p>也是一段时间没有写博客了，寒假写了几篇技术性文章后就沉迷隻狼不可自拔，玩到开学。<br>开学也是比较戏剧性，本来协调这么久还是去不了深圳，到合肥站导师又签好了深圳大学的章，可惜还是不认，乖乖回到上海做毕设。<br>开学两周兢兢业业，按照已有路线一步步往下做，生活虽然无聊，但总还是在忙忙忙。<br>最近不时地思考存在感的问题，i am right here，我要到哪去？越感地球之茫大与我之渺小。每天做完实验就回教室看电视剧，偶尔看看书，到点了回宿舍再刷会手机，洗澡上床再刷一会睡觉，早上睡过了就吃个早午饭，去教室上个厕所再去实验室。日复一日，时间在不断流逝，我却没有留下什么。毫无新意的日子，渐听渐厌的歌单，耐心散失的美剧，似乎陷入了期冀改变却又无可奈何的循环。<br>他妈的连每次去食堂吃饭都是清真的面食。这两天吃了三顿麦当劳，以至于感觉又贵又难吃。what the fuck happened？<br>到最后感觉还是钱的问题，想着毕业前找份家教多少捞点毕业有资本玩玩，日他吗待毙中介信息电话半天不回，今早好不容易去试个课对方又觉得不合适，卧槽老子初中英语还教不好吗？住尼玛汤臣豪园时薪 120 还挑三拣四。<br>躺吧，接着忍受吧。到头来，我也不过还是个 nobody。</p>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basics of Computer</title>
    <link href="/2024/01/26/Basics-of-Computer/"/>
    <url>/2024/01/26/Basics-of-Computer/</url>
    
    <content type="html"><![CDATA[<h2 id="Bit、数据类型及其运算"><a href="#Bit、数据类型及其运算" class="headerlink" title="Bit、数据类型及其运算"></a>Bit、数据类型及其运算</h2><h3 id="整数数据的表示"><a href="#整数数据的表示" class="headerlink" title="整数数据的表示"></a>整数数据的表示</h3><h4 id="Signed-integer"><a href="#Signed-integer" class="headerlink" title="Signed integer"></a>Signed integer</h4><table><thead><tr><th></th><th>符号位表示法</th><th>1’s complement</th><th>2’s complement</th></tr></thead><tbody><tr><td>00000</td><td>0</td><td>0</td><td>0</td></tr><tr><td>00001</td><td>1</td><td>1</td><td>1</td></tr><tr><td>00010</td><td>2</td><td>2</td><td>2</td></tr><tr><td>00011</td><td>3</td><td>3</td><td>3</td></tr><tr><td>00100</td><td>4</td><td>4</td><td>4</td></tr><tr><td>00101</td><td>5</td><td>5</td><td>5</td></tr><tr><td>00110</td><td>6</td><td>6</td><td>6</td></tr><tr><td>00111</td><td>7</td><td>7</td><td>7</td></tr><tr><td>01000</td><td>8</td><td>8</td><td>8</td></tr><tr><td>01001</td><td>9</td><td>9</td><td>9</td></tr><tr><td>01010</td><td>10</td><td>10</td><td>10</td></tr><tr><td>01011</td><td>11</td><td>11</td><td>11</td></tr><tr><td>01100</td><td>12</td><td>12</td><td>12</td></tr><tr><td>01101</td><td>13</td><td>13</td><td>13</td></tr><tr><td>01110</td><td>14</td><td>14</td><td>14</td></tr><tr><td>01111</td><td>15</td><td>15</td><td>15</td></tr><tr><td>10000</td><td>-0</td><td>-15</td><td>-16</td></tr><tr><td>10001</td><td>-1</td><td>-14</td><td>-15</td></tr><tr><td>10010</td><td>-2</td><td>-13</td><td>-14</td></tr><tr><td>10011</td><td>-3</td><td>-12</td><td>-13</td></tr><tr><td>10100</td><td>-4</td><td>-11</td><td>-12</td></tr><tr><td>10101</td><td>-5</td><td>-10</td><td>-11</td></tr><tr><td>10110</td><td>-6</td><td>-9</td><td>-10</td></tr><tr><td>10111</td><td>-7</td><td>-8</td><td>-9</td></tr><tr><td>11000</td><td>-8</td><td>-7</td><td>-8</td></tr><tr><td>11001</td><td>-9</td><td>-6</td><td>-7</td></tr><tr><td>11010</td><td>-10</td><td>-5</td><td>-6</td></tr><tr><td>11011</td><td>-11</td><td>-4</td><td>-5</td></tr><tr><td>11100</td><td>-12</td><td>-3</td><td>-4</td></tr><tr><td>11101</td><td>-13</td><td>-2</td><td>-3</td></tr><tr><td>11110</td><td>-14</td><td>-1</td><td>-2</td></tr><tr><td>11111</td><td>-15</td><td>-0</td><td>-1</td></tr></tbody></table><h3 id="Bit-vector"><a href="#Bit-vector" class="headerlink" title="Bit vector"></a>Bit vector</h3><h3 id="Float-point"><a href="#Float-point" class="headerlink" title="Float point"></a>Float point</h3><h3 id="American-Standard-Code-for-Information-Interchange"><a href="#American-Standard-Code-for-Information-Interchange" class="headerlink" title="American Standard Code for Information Interchange"></a>American Standard Code for Information Interchange</h3><p>8 bit 编码方式，用于在计算机处理单元和输入&#x2F;输出设备之间传递“字符”的编码标准</p><h3 id="HEXadecimal"><a href="#HEXadecimal" class="headerlink" title="HEXadecimal"></a>HEXadecimal</h3><h2 id="数字逻辑"><a href="#数字逻辑" class="headerlink" title="数字逻辑"></a>数字逻辑</h2><p>计算机 – 由非常多的简单逻辑单元组合而成</p><h3 id="MOS-晶体管"><a href="#MOS-晶体管" class="headerlink" title="MOS 晶体管"></a>MOS 晶体管</h3><p>metal-oxide semiconductor 金属氧化物半导体<br>包含三个引脚（or“电极”）：栅极（gate）、源极（source）、漏极（drain）<br>n 型 MOS 晶体管：在栅极接入 2.9 V 电压，源极和漏极之间产生一条通路&#x3D;&gt;导通 or 闭路<br>反之，栅极电压为 0 V，则源极和漏极之间断开，断开或开路（open circuit）<br>p 型 MOS 晶体管的特性则与之相反<br>电路中如果同时包含 p-MOS 和 n-MOS 晶体管，则称该电路为 CMOS 电路（c-complementary）</p><h3 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h3><p>在电子工程中，将实现逻辑函数的 CMOS 电路称为逻辑门电路（logic gate circuit），即与门、或门、非门等</p><h3 id="组合逻辑"><a href="#组合逻辑" class="headerlink" title="组合逻辑"></a>组合逻辑</h3><p>逻辑结构分为两大类，一类可以存储信息，另一类则不能<br>不能存储信息的逻辑结构有时被称为决策单元（decision element），也称组合逻辑结构（combinational logic structure），其输出状态不依赖于任何历史信息</p><h4 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h4><p>decoder<br>在所有输出中有且仅有一个为 1，其余皆为 0<br>主要用于解释一个二进制数。在 LC-3 中，每条指令的具体操作是由操作码（opcode）的二进制值决定的，这一 4-bit 数值，是指令的一部分</p><h4 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h4><p>multiplexer，MUX<br>用于从多个输入中选择一个，并将其与输出相连<br>通常由 $2^n$ 个输入、1 个输出和 n 个选择线组成</p><h4 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h4><p>full adder<br>在 n-bit 二进制表加法的真值表中，有 3 个输入（两个二进制数位 $a_i$ 和 $b_i$ 以及一个来自前一 bit 位的进位 $carry_i$ ）和 2 个输出（一个当前求和位 $S_i$ 以及一个下一进位 $carry_{i+1}$ ），解决这一过程的逻辑电路即为全加器</p><h4 id="可编程逻辑阵列"><a href="#可编程逻辑阵列" class="headerlink" title="可编程逻辑阵列"></a>可编程逻辑阵列</h4><p>我们说一个逻辑门单元集合，是一个可以实现任何逻辑函数的可构建模块（building block），又称为可编程逻辑阵列（programmable logic array, PLA），包含一组与门（AND 阵列）以及一组或门（OR 阵列），其中与门的数目对应真值表的输入组合数目（逻辑函数的输入数目为 n，则 PLA 需要 $2^n$ 个 AND 门），或门的数目取决于真值表的输出数目<br>通过编程多个与门（不同的输入组合）与多个或门（不同的输出）之间的连接关系，可以实现任何所期望的逻辑函数</p><h4 id="逻辑完备性"><a href="#逻辑完备性" class="headerlink" title="逻辑完备性"></a>逻辑完备性</h4><p>logical completeness<br>通过 PLA 可以实现任何形式的逻辑，同时注意到 PLA 只包括 OR、AND 和 NOT 三种逻辑门&#x3D;&gt;只要有足够的 AND、OR 和 NOT 门，可以实现任何逻辑函数&#x3D;&gt;{AND, OR, NOT}逻辑门集合是“逻辑完备的”</p><h2 id="von-Neumann-model"><a href="#von-Neumann-model" class="headerlink" title="von Neumann model"></a>von Neumann model</h2><h2 id="LC-3"><a href="#LC-3" class="headerlink" title="LC-3"></a>LC-3</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3>]]></content>
    
    
    
    <tags>
      
      <tag>knowledge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Speaking of HiDPI</title>
    <link href="/2024/01/20/Speaking-of-HiDPI/"/>
    <url>/2024/01/20/Speaking-of-HiDPI/</url>
    
    <content type="html"><![CDATA[<p>前天买的 type-C 转 dp 的线终于是到了，连上我刚买的 AOC 的 Q27G3XMN（2K，180Hz，miniLED 两千以内性价比还是不错），大屏看着就是爽。<br>紧接着就发现不对劲，字体怎么不细腻了，仿佛在用 Windows 一般… 进而了解到 Apple 自家的 HiDPI 技术，通过 2-3 小时的摸索，我对这技术也有了进一步的了解，记录一下。</p><h4 id="What-is-HiDPI"><a href="#What-is-HiDPI" class="headerlink" title="What is HiDPI"></a>What is HiDPI</h4><blockquote><p> HiDPI, or High Dots Per Inch, refers to displays that have a higher pixel density compared to standard displays. In other words, HiDPI displays have more pixels per inch, resulting in sharper and clearer images. This technology is particularly beneficial on smaller screens, such as those found in laptops, tablets, and smartphones, where the increased pixel density improves the visual quality and allows for crisper text and graphics.</p></blockquote><p>以上是 ChatGPT 给我的答案。顾名思义，HiDPI 指的就是相同面积上有更多的像素点，也就意味着相比于不使用这一技术的屏幕，文字会更加细腻清晰。</p><blockquote><p>HiDPI 渲染并不是由屏幕提供的，而是在操作系统中实现的，这需要计算机在输出给显示器之前就把一切文字图标等采用多倍的像素渲染成更细腻的样子。当然，这样的渲染会消耗更多的 CPU 与 GPU 运算，也就会消耗更多的能源，再加上 Retina 屏设备本身还要要承担 4 倍数量的像素显示，续航的维持必然成为一项不小的挑战。有时我们感觉苹果相继推出 Retina 屏产品只是顺应趋势的必然行为，但工程师在处理器功耗与性能的平衡取舍、屏幕材料的选择与工艺设计、电池技术的革新、操作系统的优化等等方面所付出的辛苦和努力是我们难以想象的。</p></blockquote><p>在我买的这个 AOC 显示器中，系统 Displays 选项中最高显示 HiDPI 的分辨率只有 1280×720。看起来仿佛是那个 13 英寸 macbookpro 的等比例放大，显示内容太少（这里有文章说 AppleSilicon 系列不支持 4K 以下显示器中有 HiDPI 选项，但这台 AOC 是有的）。我们知道 2K 的物理分辨率是 2560×1440，这里就是原本 1280×720 的显示效果下，通过横纵像素点各增加一倍来显示内容，并刚好契合当前显示器所支持的最大分辨率，也就是说 HiDPI 仅在硬件所支持的最大分辨率内进行放大。那按理来说，只要是小于 2K 的分辨率都可以通过 HiDPI 技术放大至 2K，比如在 1920×1080 下显示内容和比例在 27 英寸中是比较合适的，由 1920×1080 到 2560×1440，只需要横纵×1.3 不就行了嘛。但是需要注意的是 Apple 的 HiDPI 仅支持 2 倍关系。这也好理解，因为物理像素点自然是整数的，而二倍的提升效果也足矣。由于显示器的面积是固定的，HiDPI 的工作原理可以形象地理解为：在原本的物理像素点的基础上横纵增加一倍，从而细节得以增加，再面积整体等比例缩小四倍，从而重新呈现在显示器上。也就是说，1920×1080 就是这些像素点，1920×1080 （HiDPI）则有 4K 的像素点。对于 HiDPI 来说，分辨率（即 num×num）只是显示器显示内容多少的度量。</p><h4 id="How-to-make-HiDPI-available"><a href="#How-to-make-HiDPI-available" class="headerlink" title="How to make HiDPI available"></a>How to make HiDPI available</h4><p>通过前面的介绍，我们知道调节分辨率的结果不过是调节比例，限制高分辨率下的 HiDPI 就是硬件本身的最高物理分辨率（比如我不能让这个 2K 屏幕显示 4K 比例），同时也与 macbook 的渲染能力有关。于我而言，在 27 英寸下显示 1920×1080 比例的效果正合适。那怎么操作呢？联想到 HiDPI 的工作原理，我只需要让 Apple 认为我这是一块 4K 像素的显示屏不就行了。<br>网上查询可知，在 <code>/System/Library/Displays/Contents/Resources</code> 中添加一个 override 文件，形式为 plist，内容即为虚拟比例，可以在<a href="https://codeclou.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/%E4%B8%8A%E5%88%B6%E4%BD%9C">这个网站</a>制作。值得注意的是，由于之前提到的 SSV，Catalina 之后 <code>System</code> 文件夹为 <code>read-only</code>，可以通过外挂至 <code>/Library/Displays/Contents/Resources</code> 中同样生效。<br>嫌麻烦的可以直接使用比较新的 <a href="https://github.com/waydabber/BetterDisplay">BetterDisplay</a>，据说是 BetterDummy 的更新版，具体操作有 wiki 指导。对于我这个 AOC，就是下载软件后输入想 HiDPI-<em>fy</em> 的分辨率，即 1920×1080，apply 之后重启，在系统 Displays 选项中就可以选择了。实现原理也是在 <code>/Library</code> 中新建一个 <code>Displays</code> 文件夹进行更改。<br><img src="/images/effect.png" alt="效果"></p><hr><p>开启 1920×1080（HiDPI）后，文字变得细腻多了。但是离屏幕近点又会有颗粒感。这里不得不提到一个叫 PPI 的东西。</p><blockquote><p>因此在实际使用时，不能完全按照最佳观看距离计算结果去判断。显示器的最佳视距最多只能与胳膊长度保持一致，也就是 70 厘米左右。这与 27 英寸显示器的最佳视距基本保持一致。所以，27 英寸以下可按照先前计算结果，27 英寸以上显示器按照 107PPI 为最终结果。<br>由此，把计算结果进行修正后得到的视网膜级别屏幕 PPI 最低标准的最终结果是：<br>1080p 分辨率下，21.5 英寸的显示器最符合视网膜级别屏幕的要求。<br>2K  分辨率下，27 英寸以下的显示器符合视网膜级别屏幕的要求。<br>4K 分辨率下，屏幕尺寸在 41 英寸以下，均符合视网膜级别屏幕的要求，且尺寸越小，成像越细腻。</p></blockquote><p>这里改后 AOC 的 PPI 就是 $\frac{\sqrt{(2×1920)^2+(2×1080)^2}}{27}&#x3D;164$。如果在 1920×1080（HiDPI）和 1920×1080 模式下分别截图，需要在 PPI ≥164 的设备才能看出明显差别。</p><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ol><li><a href="https://zhuanlan.zhihu.com/p/20684620">https://zhuanlan.zhihu.com/p/20684620</a></li><li><a href="https://blog.skk.moe/post/hidpi-what-why-how/">https://blog.skk.moe/post/hidpi-what-why-how/</a></li><li><a href="https://www.jianshu.com/p/30f986617278">https://www.jianshu.com/p/30f986617278</a></li><li><a href="https://www.51cto.com/article/620457.html">https://www.51cto.com/article/620457.html</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>From iPhone7p to ...</title>
    <link href="/2024/01/20/From-iPhone7p-to/"/>
    <url>/2024/01/20/From-iPhone7p-to/</url>
    
    <content type="html"><![CDATA[<p>前几天玩弄 7p（iOS 10.2.1）的时候，发现适配版本的 app 都不能登陆，轻度使用的话，对于微信、网易云音乐来说，不能登陆也就相当于不适配。在探索登陆的方法中，却意外发现有关 iOS 逆向的知识，遂做记录。<br>以下探索都是在不越狱手机的情况下，对于这样一部老手机，总觉得越狱就让其变得不再完整。虽然直接选择越狱会省不少事… 但折腾成功的感觉也是挺舒服的。</p><h3 id="登陆微信"><a href="#登陆微信" class="headerlink" title="登陆微信"></a>登陆微信</h3><p>直接在网上查会发现大部分的教程都是越狱修改版本号 (在 info.list 中体现为 bundleshortversion 和 bundleversion，后面还会提到），在 B 站评论区看到有人说可以通过 FB 登陆。我突然想起来原来发朋友圈的时候是可以选择是否同时发布到 FaceBook 上的，如果这个方法行得通的话也未免太 easy 了。翻出古早的 fb 账号，重新设置一下密码，在新版微信添加朋友中搜索 facebookapp 把 wx 和 fb 连接一下，然后在 7p 上选择通过 facebook 登陆，跳转页面后输入 fb 账号连接即可，相当 nice。这里有一步比较关键，在手机第一次登陆微信有可能触发安全检验，账号冻结后需要扫脸解冻。但是老版本的微信不支持扫脸，这时就需要换回新版本的手机上进行解冻操作后再在老版本上重新登陆。<br>注意通过 appstore 下载适配老手机的应用，如果最新版本支持的最低系统仍满足自然可以直接下载，如果不满足则需要当前 ID 下载过这个应用，才能够自动下载适配当前系统的应用，否则会显示不适配而无法下载。我下载的这个适配 10.2.1 的微信和目前使用的 UI 基本没啥区别，由于想看一下远古微信的 UI，于是选择借助拦截软件<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.52pojie.cn/thread-1284776-1-1.html">[1]</span></a></sup>和 http 进行安装。</p><h4 id="远古版本安装"><a href="#远古版本安装" class="headerlink" title="远古版本安装"></a>远古版本安装</h4><p>首先安装拦截软件，Windows 需要关闭 virus&amp;threat protection settings 中的 real-time protection 避免系统自动识别删除。这里还需要安装12.6.5.3 版本的 iTunes<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://secure-appldnld.apple.com/itunes12/091-87819-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A6/iTunes64Setup.exe">[2]</span></a></sup>，即最后一版支持 appstore 的桌面版本。<br>打开拦截软件搜索微信，找到想要拦截的版本，我这里选择的是 6.6.1，即最后支持 callKit 的版本。然后在 iTunes 中搜索微信直接下载，一般都是卡住，停止拦截，暂停下载再 resume 即可。在 library 中可以找到下载的 ipa，复制到一个文件夹待用。建议是 <code>~/Desktop/xx</code> 中比较方便。<br>编辑一个 plist 文件托管到 github 上：</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plist"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>items<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>assets<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>kind<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>software-package<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>http://局域网ip:8000/NetEaseMusic.ipa<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>metadata<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>bundle-identifier<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>com.netease.cloudmusic<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>bundle-version<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>kind<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>software<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>NetEaseMusic<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面是我托管在我的 github 上的 install.plist 文件，其中 bundle-identifier 可以通过把 ipa 文件改后缀为 zip 文件进入 info.plist 查看。bundle-version 和 title 改成相应 app 的版本和名称即可。需要提醒的是，不管是 ipa 文件的名称还是后面的 title，都不能使用中文或带有空格，否则不能安装。和 plist 文件对应的，在手机浏览器上输入 <code>itms-services://?action=download-manifest&amp;url=https://raw.githubusercontent.com/troicc/ipa/main/install.plist</code> 即可安装提示安装。注意这里要托管在 github 上是因为必须是 https 类型的 url 才能引导安装，也就是通过 https 访问 plist 文件，然后 iOS 就会读取 plist 内容，下载目标局域网中的 ipa 文件。所以这种方法实际是借助 http 进行安装。在 <code>~/Desktop/xx</code> 文件夹中进入 cmd，输入 <code>python3 -m http.server 8000</code> 即可开放当前文件夹至局域网。<br>这样顺利安装 6.6.1 版本微信并通过 fb 登陆后，顺利体验到了远古 UI，怎么说呢，感觉就是 nice。想到 callKit，我猜测借助老版本微信把电话换成 googlevoice 说不定能成功，这样在新版本微信上就也能使用 callKit 了。尝试之后依旧是需要扫脸，我把微信安全团队的信息通过电脑端转发至新版微信上完成验证，然后再在老版本微信上重新换电话号码，显示成功。五分钟左右账号信息就转移至 WeChat ，在新版本微信上也确实可以使用 callKit 了。不过最近回家之后微信总是要打开转半天才能收到消息，导致处理要紧事的时候十分焦虑，相当蛋疼。</p><h3 id="登陆网易云"><a href="#登陆网易云" class="headerlink" title="登陆网易云"></a>登陆网易云</h3><p>微信老版本可以通过 fb 登陆仿佛一个还没有被程序员关闭的后门，与之相比要想登陆老版本网易云，难度可高多了。<br>我下载的是 3.1.1 版本的网易云，拦截软件显示是最早发布的一版，同样通过上述方法安装，体验下来 UI 相当简洁，也没有广告。只可惜也是登陆不了，提供的三个选项：手机号、新浪微博、网易邮箱都不行。在网上查询后只有越狱更改版本号这一个途径。但是仔细看越狱更改的步骤发现，这个方法也不过就是更改 info.list 中的 CFBundleShortVersionString 至新版本号即可。既然如此，我也能通过把 ipa 改成 zip 访问这个 info.plist 文件，更改之后再安装的效果不是一样的嘛！说干就干，一通更改后发现总是显示无法安装。我一开始还猜测是解压后 <code>iTunesMetadata.plist</code> 中的版本号也需要改成 9.0.10，不过还是失败。后来想一想，安装后系统调用的应该就是那个 neteasemusic.app 中的内容，毕竟人家越狱改的也就是这个 package 中的内容，这个 metadata 应该无关紧要。既然如此，问题出在哪呢？上网查查后发现可能存在签名被破坏的问题，突然想起来之前修改锤子便签去除审查功能时，直接安装也是失败，需要重签名才能安装。那么目标就是 find out 怎么重签名。</p><h4 id="重签名"><a href="#重签名" class="headerlink" title="重签名"></a>重签名</h4><p>首先贴出步骤，这一步我是在 macOS 上操作的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Desktop/3<br>unzip -q test.ipa<br><span class="hljs-built_in">rm</span> -r -f Payload/neteasemusic.app/_CodeSignature<br><span class="hljs-comment">#删除原本签名</span><br>security cms -D -i developer.mobileprovision &gt; ProvisioningProfile.plist<br>/usr/libexec/PlistBuddy -x -c <span class="hljs-string">&#x27;Print Entitlements&#x27;</span> ProvisioningProfile.plist &gt; Entitlements.plist<br><span class="hljs-comment">#获取entitlements.plist待用，对整个payload进行签名</span><br><span class="hljs-built_in">cp</span> developer.mobileprovision Payload/neteasemusic.app/embedded.mobileprovision<br><span class="hljs-comment">#覆盖签名</span><br>codesign -f -s key --entitlements Entitlements.plist Payload/neteasemusic.app<br>zip -q -r NetEaseMusic.ipa Payload<br><span class="hljs-comment">#如果unzip后出现多个文件夹就空格加上</span><br>python3 -m http.server 8000<br></code></pre></td></tr></table></figure><p>这里有两个关键点，<code>developer.mobileprovision</code> 和 <code>key</code>。这也是 ipa 签名的难点，相比 apk 直接可以签名，Apple 要求个人开发者订阅年费才能签名，前者为描述文件，后者为证书，成为订阅者就可以获得。688 对于我这种小白也太贵了，折腾一下还要掏这么多钱那是必不可能。网上查查能不能免费呗 xD。原来 Apple 对于个人开发者有免费 30 天的选项，后来好像在大陆由于滥用改成 7 天。但是目前我在 apple developer 官网也<a href="https://www.jianshu.com/p/01224fc523d4">没发现</a>免费 7 天的入口，最终通过 <a href="https://www.applicationloader.net/">AppUploader</a> 使用上了免费 7 天的描述证书。<br>一开始我还安装了 <a href="https://docs.fastlane.tools/">fastlane</a> 命令行，发现也是需要证书，不如直接手动打包了。自动化打包可以看参考链接 11&amp;12。</p><h5 id="Appuploader-申请证书"><a href="#Appuploader-申请证书" class="headerlink" title="Appuploader 申请证书"></a>Appuploader 申请证书</h5><p>首先在证书管理界面创建证书，选择 Apple 开发证书即可（Apple Development），名字随便起，密码要记住，创建后下载的是 .p12 文件，点击后安装到 keychain，安装时即需要设置的密码。比较惊讶的是我之前居然已经有开发证书，忘记了咋搞的了，不过既然能申请索性都在这个平台上重新搞了。这一步就是为了得到 <code>key</code>，安装后在 terminal 输入 <code>security find-identity -v</code> 查看对应编码，即为 <code>key</code>。<br>然后在描述文件管理界面创建描述文件，名字随便起，选择 iOS 应用，证书选择刚创建的证书，设备通过连接 Mac 和 iPhone 查看其 UDID 复制粘贴上去，在哪个设备上安装就用哪个 UDID。下载下来，如果名字是 developer，就得到 <code>developer.mobileprovision</code>。<br>需要说明的是，证书的有效期是一年，而描述文件的有效期是 7 天。</p><h4 id="砸壳"><a href="#砸壳" class="headerlink" title="砸壳"></a>砸壳</h4><p>在讲述砸壳这个话题前，我实话实说是历经艰险才发现还有这一个 obstacle 的。<br>重签名后我信心满满地安装，心想这下总 OK 了吧，也不过如此。可是通过 http 总是安装不下来，由于这个过程不可视，我也难以发现到底是签名没签好、版本设置不对还是其他什么问题。怎么可视化，也就是怎么能够调试呢？在<a href="https://www.yangshebing.com/2018/01/06/iOS%E9%80%86%E5%90%91%E5%BF%85%E5%A4%87%E7%BB%9D%E6%8A%80%E4%B9%8Bipa%E9%87%8D%E7%AD%BE%E5%90%8D/">这篇博客</a>中，作者提到了一个叫 ios-deploy 命令行工具，我通过 homebrew 下载后，terminal 输入 <code>ios-deploy -d -b Payload/NetEaseMusic.app</code>，电脑就开始自动识别设备（USB 或者 WIFI）并安装。一开始结果显示 <code>The operation couldn’t be completed. Unable to launch bundleID because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user.</code>，需要在设置里的设备管理信任证书。这就正常了，既然有证书，说明我的签名过程是没问题的。也说明 http 安装应该只适用于从 appstore 中下载的 ipa。OK，信任后再重新调试，又显示失败 process -1。啥意思嘞？我从 7p 上点开这个应用发现闪退。歪日，上网一查，原来从 appstore 下载的 ipa 都被 Apple 加上了保护壳，直接修改并重签名，安装后会出现闪退。也就是说，在这一切之前，我就需要先进行所谓的“砸壳”。其实签名的教程中许多也提到了，我没有注意到…<br>好歹算是发现问题了，那目标再一次明确，怎么砸壳。<br>搞笑的是砸壳需要一部越狱的手机，从越狱手机下载的 ipa 文件是破解了 Apple 加密的。那我的初衷就是不越狱，假如越狱的话还用得着这么折腾吗？！兜兜转转又回到原点，越狱 or not。所以说我这么折腾半天就为了登陆一个网易云实在是大材小用，一般砸壳就是为了逆分析 ipa，分析软件实现原理，更高级的那就是魔改 UI 、功能啥的，改个版本号属实是小 case 了。<br>但也不能前功尽弃吧，在淘宝上找到 5 块钱的砸一个，告诉他 3.1.1 后他先发给我一个 ipa，解压发现和我从 iTunes 下载的没啥区别，重签名安装后还是不行，他也知道不行，说是老壳子不好砸。后面他又发给我一个 ipa，我解压后发现里面已经有签名描述文件，不过已经过期 4 年了。还多了一个 MyiP14 文件，不知道是啥。但至少说明这个 ipa 不是从 appstore 下载的，他说是降级再砸壳，哥们也不懂。重签名后安装，“奇迹般”能够打开，并且！也能实现手机号正常登陆，非常 NICE！</p><hr><p>值得注意的是，这个 3.1.1 版本的网易云包内容比较简单，没有动态库，唯一的一个 plugins 文件夹我查到好像说是无法签名我就直接删掉了，也没啥影响。对于更复杂的情况，可能需要对 framework 额外签名，还可能去除时间锁等。<br><small>PS：其实不需要把 info.list 原本的 bundleID 改成个人开发者的 bundleID。</small><br>一番折腾下来，7p 可用性更高了。继了解过 apk 逆向后，对 ipa 逆向也有了全新的理解。</p><hr><p>今天又看到了一个免越狱安装未签名 ipa 的 app：trollstore 2。可惜只能安装在 iOS15，在 trollstore 中安装的 appdump 2 也只能砸壳安装好的 app。那 11p 导入老版本砸壳后更改版本号再重签名至 7p 上使用的“曲线救国”就行不通了，因为老版本是无法安装至高系统上的… 有点理解什么叫降级再砸了，降级相当于就是在低系统上越狱，用越狱的方法砸壳。<br>在淘宝上又花五块钱买的砸壳 4.1.0 版本的豆瓣，可惜豆瓣的包就比较复杂，有动态库。即使通过 <code>codesign --force --verify --verbose --sign key *.dylib</code> 进行签名，成功安装进入 app 原来的 api 也无法调用导致无法使用。通过观察与新版本包的区别，库的内容都变了，简单移植 framework 内容，并补充 <code>codesign -fs key *.framework</code> 签名，调试失败。豆瓣的域名也禁止 MitM，即使使用新版通过代理软件也不能完全屏蔽广告。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>iPhone 7p (10.2.1)<br>iPhone 11p（15.6）<br>MacBook Pro M1（12.6）<br>Window 10</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.jianshu.com/p/fbc7d4c436aa">https://www.jianshu.com/p/fbc7d4c436aa</a></li><li><a href="https://www.jianshu.com/p/814e7e1906fe">https://www.jianshu.com/p/814e7e1906fe</a></li><li><a href="https://xelz.info/blog/2019/01/11/ios-code-signature/">https://xelz.info/blog/2019/01/11/ios-code-signature/</a></li><li><a href="https://blog.csdn.net/Airths/article/details/107512837">https://blog.csdn.net/Airths/article/details/107512837</a></li><li><a href="https://www.jianshu.com/p/2eac15125d00">https://www.jianshu.com/p/2eac15125d00</a></li><li><a href="http://chuquan.me/2020/03/22/ios-certificate-principle/">http://chuquan.me/2020/03/22/ios-certificate-principle/</a></li><li><a href="https://superdanny.link/2015/09/29/iOS-app-install-fail-reason/">https://superdanny.link/2015/09/29/iOS-app-install-fail-reason/</a></li><li><a href="https://www.jianshu.com/p/9b9136fa1444">https://www.jianshu.com/p/9b9136fa1444</a></li><li><a href="https://morganwang.cn/2023/07/14/ipa%E9%87%8D%E7%AD%BE%E5%90%8D/">https://morganwang.cn/2023/07/14/ipa%E9%87%8D%E7%AD%BE%E5%90%8D/</a></li><li><a href="https://www.jianshu.com/p/52deb349d5d1">https://www.jianshu.com/p/52deb349d5d1</a></li><li><a href="https://www.jianshu.com/p/4f63e8c26af8">https://www.jianshu.com/p/4f63e8c26af8</a></li><li><a href="https://juejin.cn/post/7009172244253540383">https://juejin.cn/post/7009172244253540383</a></li><li><a href="https://bbs.kanxue.com/thread-263907.htm#%E5%8F%82%E8%80%83%E6%96%87%E4%BB%B6">https://bbs.kanxue.com/thread-263907.htm#%E5%8F%82%E8%80%83%E6%96%87%E4%BB%B6</a></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.52pojie.cn/thread-1284776-1-1.html">https://www.52pojie.cn/thread-1284776-1-1.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://secure-appldnld.apple.com/itunes12/091-87819-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A6/iTunes64Setup.exe">https://secure-appldnld.apple.com/itunes12/091-87819-20180912-69177170-B085-11E8-B6AB-C1D03409AD2A6/iTunes64Setup.exe</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Guitar Music Theory</title>
    <link href="/2024/01/17/Guitar-Music-Theory/"/>
    <url>/2024/01/17/Guitar-Music-Theory/</url>
    
    <content type="html"><![CDATA[<h3 id="Time-value"><a href="#Time-value" class="headerlink" title="Time value"></a>Time value</h3><p>Breve<br>Semibreve (whole notes)<br>Minims<br>Crotchets (quarter notes)<br>Quavers<br>Semiquavers (sixteenth notes)<br>Demisemiquaver<br>Hemidemisemiquaver<br>一拍一杠上右下左</p><h3 id="Time-signatures"><a href="#Time-signatures" class="headerlink" title="Time signatures"></a>Time signatures</h3><p>Bar-lines (vertical)<br>C 4&#x2F;4 拍 Ȼ 2&#x2F;2 拍（alla breve）<br>double bar-lines—-end of a principal section</p><h3 id="Tempo"><a href="#Tempo" class="headerlink" title="Tempo"></a>Tempo</h3><p>The speed of the beats<br>节拍</p><h3 id="Rhythm"><a href="#Rhythm" class="headerlink" title="Rhythm"></a>Rhythm</h3><p>The way in which sounds of varying length and accentuation are grouped into patterns<br>节奏（由节拍组成）</p><h3 id="Pitch-names-and-notation"><a href="#Pitch-names-and-notation" class="headerlink" title="Pitch names and notation"></a>Pitch names and notation</h3><p>Pitch refers to the height or depth of sound<br>固定调唱名法（2 个黑键中的是 D，左 C 右 E）<br><strong>middle C</strong>—-the C nearest to the centre of the keyboard<br><strong>Octave</strong> (like C to C, eight notes in all)<br><strong>Stave&#x2F;stall</strong> (five lines and spaces counted from the bottom)<br>高音谱号中央 C 位于下加一线<br>低音谱号中央 C 位于上加一线（均表示为 ledger lines）<br><strong>8 or 8va</strong>（<em>ottava</em> Italian for octave）位于 stave 上下方分别表示高低八度<br>Black notes names: left name sharp (#)or right name flat (𝑏)<br><strong>enharmonics</strong> two notes have the same sound but different names<br><strong>Semitone</strong> refers to the distance in pitch between any note and its nearest neighbor, black or white<br><strong>tone</strong> refers to an interval of two semitones</p><h3 id="The-major-scale"><a href="#The-major-scale" class="headerlink" title="The major scale"></a>The major scale</h3><p>Scale particular notes of a piece (ladder) 音阶<br><strong>major scale</strong> TTSTTTS</p><h3 id="Key-signatures"><a href="#Key-signatures" class="headerlink" title="Key signatures"></a>Key signatures</h3><p>调号 after the clef and before the time signature</p><h3 id="Accidentals"><a href="#Accidentals" class="headerlink" title="Accidentals"></a>Accidentals</h3><p>临时升降记号<br>Once an accidental has appeared in a bar, it remains in force until the end of the bar</p><h3 id="Rests"><a href="#Rests" class="headerlink" title="Rests"></a>Rests</h3>]]></content>
    
    
    
    <tags>
      
      <tag>music</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo problems</title>
    <link href="/2024/01/17/hexo-problems/"/>
    <url>/2024/01/17/hexo-problems/</url>
    
    <content type="html"><![CDATA[<p>刚发布文章时，hexo 莫名抽风。<br><code>ssh -T git@github.com</code> 显示 port22，在此之前重新替换了 ssh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;email&quot;</span><br></code></pre></td></tr></table></figure><p>结果还是不行。在<a href="https://blog.csdn.net/wang975380547/article/details/78116070">这篇文章</a> 中按照指导在 ~&#x2F;.ssh 中增加一个 config 文件，内容为：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host github.com<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SIP and SSV of Apple</title>
    <link href="/2024/01/17/SIP-and-SSV-of-Apple/"/>
    <url>/2024/01/17/SIP-and-SSV-of-Apple/</url>
    
    <content type="html"><![CDATA[<p>最近输入法总是莫名其妙地跳 ABC，输入设置中也不能删除，查询一番后发现必须要更改 plist 文件，系统 plist 更改需要关闭电脑的 SIP，即 system integrity protection。关闭 SIP 之后我想起来之前想更改系统应用的图标时好像也需要这一操作，结果发现还是不能替换，原来苹果又搞了一个 SSV，即 signed system volume，不关闭 SSV 无法更改 read-only file system 中的内容。</p><h3 id="删除-ABC"><a href="#删除-ABC" class="headerlink" title="删除 ABC"></a>删除 ABC</h3><p>Apple silicon 系列关机后长按开机键进入 recovery system，然后在 terminal 中输入 <code>csrutil disable</code> 即可关闭 SIP。输入 <code>reboot</code> 重启。<br><strong>在 ABC 状态下</strong>，进入 <code>~/Library/Preferences/com.apple.HIToolbox.plist</code>，用 plist editor 打开，在 AppleEnabledInputSources 中找到包含 KeyboardLayout Name 为 ABC 的 item，将其删除并保存，重启即可删除 ABC。</p><h3 id="替换系统图标"><a href="#替换系统图标" class="headerlink" title="替换系统图标"></a>替换系统图标</h3><blockquote><p>Excerpt from an Apple article:<br>In macOS Catalina, Apple introduced the read-only system volume, which is a dedicated, isolated volume for system content. Now, macOS Big Sur adds strong cryptographic protections to store system content on a signed system volume (SSV). SSV features a kernel mechanism that verifies the integrity of the system content at runtime, and rejects any data — code and non-code — that doesn’t have a valid cryptographic signature from Apple.<br>SSV helps prevent tampering with any Apple software that is part of the operating system. Additionally, it makes macOS Software Update more reliable and much safer. SSV utilizes APFS snapshots, so if an update cannot be performed, the old system version can be restored without reinstallation.</p></blockquote><p>首先在 Security&amp;Privacy 中关闭 fileVault，然后同样在 recovery terminal 中，输入 <code>csrutil authenticated-root disable</code> 即可关闭 SSV，接着 <code>reboot</code>。在 terminal 中输入 <code>mount</code> 查看已挂载文件系统的列表，其中系统盘的名称，即 <code>on /</code> 前的路径，我的电脑是 <code>/dev/disk3s1s1</code>，其中 <code>dev</code> 表示 device，<code>disk3</code> 指物理磁盘，<code>s1</code> 指其上的一个分区，紧接着的 <code>s1</code> 指的是分区中的一个卷，可能包含子卷或快照，即当前设备显示内容。<br>既然原本分区中的内容不可 write，在关闭 SSV 后可以将其挂载到 writable 的分区中，然后进行改写，最后再将改写后的分区覆盖原本的快照即可。<br>具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/mnt<br>sudo mount -o nobrowse -t apfs /dev/disk3s1 ~/mnt<br><span class="hljs-comment">#这里就将当前系统盘挂载到当前用户的mnt文件夹中，在这一可读写区中进行目标操作即可，对于我来说就是将maps和music的图标换成复古风格</span><br>sudo bless --mount <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/mnt/System/Library/CoreServices/&quot;</span> --setBoot --create-snapshot<br><span class="hljs-comment">#setBoot指定挂载点作为下一次启动要使用的启动卷，并通过create-snapshot创建快照在下一次系统启动时使用</span><br></code></pre></td></tr></table></figure><p>重启后即可发现更改已经生效。不过不能再开启 SSV，否则更改将失效。这里最后一步有<a href="https://nektony.com/how-to/uninstall-default-apple-apps-on-mac">指导</a>用的是 <code>sudo bless --folder ~/mnt/System/Library/CoreServices --bootefi --create-snapsho</code>，<code>--folder</code> 也是指定挂载路径，<code>--bootefi</code> 是指定 EFI 分区的路径作为启动卷，暂时不知道区别是啥，不过指导里说可以重新 enable SIP 和 SSV。</p><blockquote><p>SSV 和文件保险箱<br>在 macOS 11 中，SSV 为系统内容提供对等的静息状态保护，因此系统宗卷不再需要加密。读取到对静息状态文件系统进行的任何修改时，文件系统会检测到这些修改。如果用户已启用文件保险箱，数据宗卷上的用户内容仍通过用户提供的密钥加密。<br>如果用户选择停用 SSV，处于静息状态的系统会变得易于篡改，此篡改可使攻击者能够在系统下次启动时提取加密的用户数据。因此，如果文件保险箱已启用，系统不会允许用户停用 SSV。<strong>静息状态保护必须同时为两个宗卷启用或停用。</strong></p></blockquote><p>值得注意的是，SSV 不能启用会导致 fileVault 也无法启用，文件不能被加密。目前来说，想要 DIY 一下就得留点风险出来，自己斟酌吧。<br>结果展示：<br><img src="/images/icons.png" alt="图标"><br>还是原来的图标有味道。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://egpu.io/forums/mac-setup/macos-up-to-11/">https://egpu.io/forums/mac-setup/macos-up-to-11/</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2024/01/12/Hello-world/"/>
    <url>/2024/01/12/Hello-world/</url>
    
    <content type="html"><![CDATA[<h4 id="建博成功"><a href="#建博成功" class="headerlink" title="建博成功"></a>建博成功</h4><p>今天终于将建立一个博客的想法付诸实践，购买域名时发现还有 cc 后缀的域名，直接从 namesilo 上买下一年，无需实名。把域名通过 CNAME 定到 github pages 上废了半天劲，才发现 deploy from a branch 要选择 master 而不是 main（config 里填的是 master）。一开始不理解 hexo 和 github pages 为啥能联系到一起，在 DNS 解析和 hexo 同步本地内容至网页的过程中，逐渐明白通过 pages 访问自己的域名可以省去买服务器的钱。果然还是要行动起来，才能了解问题，解决问题。</p><hr><p>本来懒得提的，但是最近在玩育碧的极限国度进入游戏后总是连不上服务器，官方的<a href="https://www.ubisoft.com/en-us/help/connectivity-and-performance/article/performing-a-ping-test-on-pc/000095398">指导</a>里面让在 cmd 中 <code>ping www.ubisoft.com</code> 看是否 ping 通，尝试之后发现不行。由此才发现代理应用并不能代理全部流量，比如部分游戏就不行。在 CFW 中使用 TUN 模式虚拟一个网卡即可真正实现“系统代理”。加速器的原理应该也是这样，之前在 macOS 的虚拟机上玩 Assassin’s Creed II 的时候（没错，也是育碧），也是登陆不上，找半天免费加速器又显示虚拟网卡安装失败…（后来正确的解决方法是自己下载 ubisoft connect 而不使用 steam 自动下载的 uplay）之前刚买极限国度是可以连接的，猜测 GFW 又把 <code> www.ubisoft.com</code> 拦截了。</p><blockquote><p>在 macOS 和 iOS 下，要想使程序发出的网络连接被另一个程序所接管，而不是直接将数据发送到物理网卡，有以下三种方式：<br><em>配置代理：如果系统配置了代理服务器，那么程序在执行网络请求的时候，就不会直接连接目标服务器，而是产生一个发向代理服务器的连接。利用这个特性，可以在本地启动一个代理服务，并配置系统代理为 127.0.0.1 （即本机）的一个端口，这样就可以接管网络请求。</em><br>但是，这种方式要求程序自身支持代理机制，系统的代理设置只是告知程序应该使用代理，需要程序自己完成代理的后续逻辑。好在，对于绝大部分带用户界面的程序，由于开发时使用了系统的高层网络框架（Cocoa&#x2F;Cocoa Touch），开发者不需要进行任何额外的工作就可以支持代理。<br>而对于命令行程序，由于使用的是 <strong>POSIX 接口</strong>进行网络请求，该接口并没有对代理服务器提供内嵌支持，所以需要开发者自己完成对代理服务器的支持，这导致各种命令行程序对代理的支持情况和具体行为并不统一。同时由于大部分命令行程序并没有为 macOS 进行特殊处理，所以不会理会系统配置里的代理服务器设置。大部分命令行程序需要通过环境变量 https_proxy 和 http_proxy 去配置代理，还有一部分需要通过修改配置文件进行配置。<br> <small> <a href="https://manual.nssurge.com/book/understanding-surge/cn/">https://manual.nssurge.com/book/understanding-surge/cn/</a> </small></p></blockquote><p>此外，想起来搭建博客的时候，通过 homebrew 下载包时速度慢的难以忍受，一番查阅后发现除了使用国内源，还可以在代理应用中导出 shell command，从而才能让终端也能被代理应用接管。这也就是为什么育碧官方指导建议通过终端查看网络连接是否存在问题。后续针对这一部分内容，可能会再开一个详细的“教程”，先学习一下网络知识吧。</p><hr><p>一年过去了，也没写什么东西，12 号过期今天看了一下才发现网站打不开了。还要网站有 grace period 35 天吧。又续费了一年，9.99 美元。好贵啊，这一年还是要多写点东西，也多改变一下网站风格。（25-1-23 16:36:22）</p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
