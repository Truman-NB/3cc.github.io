<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Guitar Music Theory</title>
    <link href="/2024/01/17/Guitar-Music-Theory/"/>
    <url>/2024/01/17/Guitar-Music-Theory/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>music</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo problems</title>
    <link href="/2024/01/17/hexo-problems/"/>
    <url>/2024/01/17/hexo-problems/</url>
    
    <content type="html"><![CDATA[<p>刚发布文章时，hexo 莫名抽风。<br><code>ssh -T git@github.com</code> 显示 port22，在此之前重新替换了 ssh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;email&quot;</span><br></code></pre></td></tr></table></figure><p>结果还是不行。在<a href="https://blog.csdn.net/wang975380547/article/details/78116070">这篇文章</a> 中按照指导在 ~&#x2F;.ssh 中增加一个 config 文件，内容为：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host github.com<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SIP and SSV of Apple</title>
    <link href="/2024/01/17/SIP-and-SSV-of-Apple/"/>
    <url>/2024/01/17/SIP-and-SSV-of-Apple/</url>
    
    <content type="html"><![CDATA[<p>最近输入法总是莫名其妙地跳 ABC，输入设置中也不能删除，查询一番后发现必须要更改 plist 文件，系统 plist 更改需要关闭电脑的 SIP，即 system integrity protection。关闭 SIP 之后我想起来之前想更改系统应用的图标时好像也需要这一操作，结果发现还是不能替换，原来苹果又搞了一个 SSV，即 signed system volume，不关闭 SSV 无法更改 read-only file system 中的内容。</p><h3 id="删除-ABC"><a href="#删除-ABC" class="headerlink" title="删除 ABC"></a>删除 ABC</h3><p>Apple silicon 系列关机后长按开机键进入 recovery system，然后在 terminal 中输入 <code>csrutil disable</code> 即可关闭 SIP。输入 <code>reboot</code> 重启。<br><strong>在 ABC 状态下</strong>，进入 <code>~/Library/Preferences/com.apple.HIToolbox.plist</code>，用 plist editor 打开，在 AppleEnabledInputSources 中找到包含 KeyboardLayout Name 为 ABC 的 item，将其删除并保存，重启即可删除 ABC。</p><h3 id="替换系统图标"><a href="#替换系统图标" class="headerlink" title="替换系统图标"></a>替换系统图标</h3><blockquote><p>Excerpt from an Apple article:<br>In macOS Catalina, Apple introduced the read-only system volume, which is a dedicated, isolated volume for system content. Now, macOS Big Sur adds strong cryptographic protections to store system content on a signed system volume (SSV). SSV features a kernel mechanism that verifies the integrity of the system content at runtime, and rejects any data — code and non-code — that doesn’t have a valid cryptographic signature from Apple.<br>SSV helps prevent tampering with any Apple software that is part of the operating system. Additionally, it makes macOS Software Update more reliable and much safer. SSV utilizes APFS snapshots, so if an update cannot be performed, the old system version can be restored without reinstallation.</p></blockquote><p>首先在 Security&amp;Privacy 中关闭 fileVault，然后同样在 recovery terminal 中，输入 <code>csrutil authenticated-root disable</code> 即可关闭 SSV，接着 <code>reboot</code>。在 terminal 中输入 <code>mount</code> 查看已挂载文件系统的列表，其中系统盘的名称，即 <code>on /</code> 前的路径，我的电脑是 <code>/dev/disk3s1s1</code>，其中 <code>dev</code> 表示 device，<code>disk3</code> 指物理磁盘，<code>s1</code> 指其上的一个分区，紧接着的 <code>s1</code> 指的是分区中的一个卷，可能包含子卷或快照，即当前设备显示内容。<br>既然原本分区中的内容不可 write，在关闭 SSV 后可以将其挂载到 writable 的分区中，然后进行改写，最后再将改写后的分区覆盖原本的快照即可。<br>具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/mnt<br>sudo mount -o nobrowse -t apfs /dev/disk3s1 ~/mnt<br><span class="hljs-comment">#这里就将当前系统盘挂载到当前用户的mnt文件夹中，在这一可读写区中进行目标操作即可，对于我来说就是将maps和music的图标换成复古风格</span><br>sudo bless --mount <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/mnt/System/Library/CoreServices/&quot;</span> --setBoot --create-snapshot<br><span class="hljs-comment">#setBoot指定挂载点作为下一次启动要使用的启动卷，并通过create-snapshot创建快照在下一次系统启动时使用</span><br></code></pre></td></tr></table></figure><p>重启后即可发现更改已经生效。不过不能再开启 SSV，否则更改将失效。这里最后一步有<a href="https://nektony.com/how-to/uninstall-default-apple-apps-on-mac">指导</a>用的是 <code>sudo bless --folder ~/mnt/System/Library/CoreServices --bootefi --create-snapsho</code>，<code>--folder</code> 也是指定挂载路径，<code>--bootefi</code> 是指定 EFI 分区的路径作为启动卷，暂时不知道区别是啥，不过指导里说可以重新 enable SIP 和 SSV。</p><blockquote><p>SSV 和文件保险箱<br>在 macOS 11 中，SSV 为系统内容提供对等的静息状态保护，因此系统宗卷不再需要加密。读取到对静息状态文件系统进行的任何修改时，文件系统会检测到这些修改。如果用户已启用文件保险箱，数据宗卷上的用户内容仍通过用户提供的密钥加密。<br>如果用户选择停用 SSV，处于静息状态的系统会变得易于篡改，此篡改可使攻击者能够在系统下次启动时提取加密的用户数据。因此，如果文件保险箱已启用，系统不会允许用户停用 SSV。<strong>静息状态保护必须同时为两个宗卷启用或停用。</strong></p></blockquote><p>值得注意的是，SSV 不能启用会导致 fileVault 也无法启用，文件不能被加密。目前来说，想要 DIY 一下就得留点风险出来，自己斟酌吧。<br>结果展示：<br><img src="/images/icons.png" alt="图标"><br>还是原来的图标有味道。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://egpu.io/forums/mac-setup/macos-up-to-11/">https://egpu.io/forums/mac-setup/macos-up-to-11/</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2024/01/12/Hello-world/"/>
    <url>/2024/01/12/Hello-world/</url>
    
    <content type="html"><![CDATA[<h4 id="建博成功"><a href="#建博成功" class="headerlink" title="建博成功"></a>建博成功</h4><p>今天终于将建立一个博客的想法付诸实践，购买域名时发现还有 cc 后缀的域名，直接从 namesilo 上买下一年，无需实名。把域名通过 CNAME 定到 github pages 上废了半天劲，才发现 deploy from a branch 要选择 master 而不是 main（config 里填的是 master）。一开始不理解 hexo 和 github pages 为啥能联系到一起，在 DNS 解析和 hexo 同步本地内容至网页的过程中，逐渐明白通过 pages 访问自己的域名可以省去买服务器的钱。果然还是要行动起来，才能了解问题，解决问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
